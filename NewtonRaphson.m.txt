%% Ybus FORMULATION
Y(1,1) = 3.81563 -19.07814i + +5.1696 -25.8478i +0.05125i +0.03875i;
Y(1,2) = -3.81563 +19.07814i;
Y(1,3)= -5.1696 +25.8478i;
Y(1,4) = 0;
Y(2,1) = -3.81563 +19.07814i;
Y(2,2) = 3.81563 -19.07814i + 5.1696 -25.8478i + 0.03875i +0.05125i;
Y(2,3) = 0;
Y(2,4) = -5.1696 +25.8478i;
Y(3,1) = -5.1696 +25.8478i;
Y(3,2) = 0; 
Y(3,3)= 5.1696 -25.8478i + 3.023705 -15.18528i + 0.06375i +0.03875i;
Y(3,4) =  -3.023705 +15.18528i;
Y(4,1) = 0;
Y(4,2) = -5.1696 +25.8478i;
Y(4,3) = -3.023705 +15.18528i;
Y(4,4) = 5.1696 -25.8478i +3.023705 -15.18528i; + 0.06375i +0.03875i;
%% GIVENS
%slack bus:
V(1) =1+0i;
Slack_Bus_Load = 0.5 +0.3099i;
%PQ Buses:
Psch(2) = -1.7;
Qsch(2) = -1.0535;
V(2) = 1+0i; %Initial condition
Psch(3) = -2;
Qsch(3) = -1.2394;
V(3) = 1+0i; %Initial condition
%PV bus:
Psch(4) = 2.38;
V(4) = 1.02 + 0i;
%% ITERATIONS

for j = 0:1:5
    %Jacobian matrix calculation:
    
      jacobian(1,1) = abs(V(2)*Y(2,1)*V(1))*sin(angle(Y(2,1))+angle(V(1))-angle(V(2)))+abs(Y(2,4)*V(4)*V(2))*sin(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(1,2) = 0;
      jacobian(1,3) = -abs(V(2)*Y(2,4)*V(4))*sin(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(1,4) = 2*(abs(V(2))^2)*real(Y(2,2)) + abs(V(2)*Y(2,1)*V(1))*cos(angle(Y(2,1))+angle(V(1))-angle(V(2)))+abs(Y(2,4)*V(4)*V(2))*cos(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(1,5) =0;
      jacobian(2,1) =0;
      jacobian(2,2) = abs(V(3)*Y(3,1)*V(1))*sin(angle(Y(3,1))+angle(V(1))-angle(V(3)))+abs(Y(3,4)*V(4)*V(3))*sin(angle(Y(3,4))+angle(V(4))-angle(V(3)));
      jacobian(2,3) = -abs(V(3)*Y(3,4)*V(4))*sin(angle(Y(3,4))+angle(V(4))-angle(V(3)));
      jacobian(2,4) = 0;
      jacobian(2,5) = 2*(abs(V(3))^2)*real(Y(3,3))+ abs(V(3)*Y(3,1)*V(1))*cos(angle(Y(3,1))+angle(V(1))-angle(V(3)))+abs(Y(3,4)*V(4)*V(3))*cos(angle(Y(3,4))+angle(V(4))-angle(V(3)));
      jacobian(3,1) = -abs(V(2)*Y(4,2)*V(4))*sin(angle(Y(4,2))+angle(V(2))-angle(V(4)));
      jacobian(3,2) = -abs(V(3)*Y(4,3)*V(4))*sin(angle(Y(4,3))+angle(V(3))-angle(V(4)));
      jacobian(3,3) = abs(V(2)*Y(4,2)*V(4))*sin(angle(Y(4,2))+angle(V(2))-angle(V(4)))+abs(Y(4,3)*V(3)*V(4))*sin(angle(Y(4,3))+angle(V(3))-angle(V(4)));
      jacobian(3,4) = abs(V(4)*Y(4,2)*V(2))*cos(angle(Y(4,2))+angle(V(2))-angle(V(4)));
      jacobian(3,5) = abs(V(4)*Y(4,3)*V(3))*cos(angle(Y(4,3))+angle(V(3))-angle(V(4)));
      jacobian(4,1) = abs(V(2)*Y(2,1)*V(1))*cos(angle(Y(2,1))+angle(V(1))-angle(V(2)))+abs(Y(2,4)*V(4)*V(2))*cos(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(4,2) = 0;
      jacobian(4,3) =  -abs(V(2)*Y(2,4)*V(4))*cos(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(4,4) = -2*(abs(V(2))^2)*imag(Y(2,2)) -abs(V(2)*Y(2,1)*V(1))*sin(angle(Y(2,1))+angle(V(1))-angle(V(2)))-abs(Y(2,4)*V(4)*V(2))*sin(angle(Y(2,4))+angle(V(4))-angle(V(2)));
      jacobian(4,5) = 0;
      jacobian(5,1) = 0; 
      jacobian(5,2) = abs(V(3)*Y(3,1)*V(1))*cos(angle(Y(3,1))+angle(V(1))-angle(V(3)))+abs(Y(3,4)*V(4)*V(3))*cos(angle(Y(3,4))+angle(V(4))-angle(V(3)));
      jacobian(5,3) = -abs(V(3)*Y(3,4)*V(4))*cos(angle(Y(3,4))+angle(V(4))-angle(V(3)));
      jacobian(5,4) = 0;
      jacobian(5,5) = -2*(abs(V(3))^2)*imag(Y(3,3)) -abs(V(3)*Y(3,1)*V(1))*sin(angle(Y(3,1))+angle(V(1))-angle(V(3)))-abs(Y(3,4)*V(4)*V(3))*sin(angle(Y(3,4))+angle(V(4))-angle(V(3)));

    %Inverse jacobian matrix:
    Inv_Jacobian = inv(jacobian);
    
    %Calculated power(P):
    for cntr=2:1:4
    Psum = 0;
    for n=1:1:4
        Psum = Psum + abs(Y(cntr,n)*V(n))*cos(angle(Y(cntr,n))+angle(V(n))-angle(V(cntr)));
    end
    Pcalc(cntr) = abs(V(cntr))*Psum;
    
    end
    %Calculated reactive power(Q):
     for cntr=2:1:3
    Qsum = 0;
    for n=1:1:4
        Qsum = Qsum + abs(Y(cntr,n)*V(n))*sin(angle(Y(cntr,n))+angle(V(n))-angle(V(cntr)));
    end
    Qcalc(cntr) = -abs(V(cntr))*Qsum;
    
     end
    %Delta matrix calculation:
    delta_matrix(1,1) = Psch(2)-Pcalc(2);
    delta_matrix(2,1) = Psch(3)-Pcalc(3);
    delta_matrix(3,1) = Psch(4)-Pcalc(4);
    delta_matrix(4,1) = Qsch(2)-Qcalc(2);
    delta_matrix(5,1) = Qsch(3)-Qcalc(3);
    
    %Delta variables matrix:
    delta_var = Inv_Jacobian*delta_matrix;
    
    %New values:
    V2angle = angle(V(2))+ delta_var(1,1);
    V3angle = angle(V(3))+ delta_var(2,1);
    V4angle = angle(V(4))+ delta_var(3,1);
    V2mag = abs(V(2))*(1+ delta_var(4,1));
    V3mag = abs(V(3))*(1+ delta_var(5,1));
  
   
   V(2) = V2mag*(cos(V2angle)+i*sin(V2angle));
   V(3) = V3mag*(cos(V3angle)+i*sin(V3angle));
   V(4) = 1.02*(cos(V4angle)+i*sin(V4angle));
    
end

%% SLACK BUS POWER CALCULATION

CurrentSum =0;
for n=1:1:4
    CurrentSum = CurrentSum + V(n)*Y(1,n);
    
end
Slack_Bus_Injected_Power = V(1)*conj(CurrentSum);
Slack_Bus_Generated_Power = Slack_Bus_Injected_Power + Slack_Bus_Load ;

%% POWER FLOWS AND POWER LOSSES CALCULATIONS

%Line 1-2:
S12 = V(1)*conj(-(V(1)-V(2))*Y(1,2)+V(1)*0.09i);
S21 = V(2)*conj(-(V(2)-V(1))*Y(1,2)+V(2)*0.09i);
Line1_2Losses = S12+S21;
%Line 1-3:
S13 = V(1)*conj(-(V(1)-V(3))*Y(1,3)+V(1)*0.09i);
S31 = V(3)*conj(-(V(3)-V(1))*Y(1,3)+V(3)*0.09i);
Line1_3Losses = S13+S31;
%Line 3-4:
S34 = V(3)*conj(-(V(3)-V(4))*Y(3,4)+V(3)*0.1025i);
S43 = V(4)*conj(-(V(4)-V(3))*Y(3,4)+V(4)*0.1025i);
Line4_3Losses = S34+S43;
%Line 2-4:
S24 = V(2)*conj(-(V(2)-V(4))*Y(2,4)+V(2)*0.09i);
S42 = V(4)*conj(-(V(4)-V(2))*Y(2,4)+V(4)*0.1025i);
Line4_2Losses = S24 +S42;

%% RESULTS DISPLAY

%Bus voltages display:
BUS_NUMBER = ["Bus 1";"Bus 2"; "Bus 3"; "Bus 4"];
VOLTAGE_Kv =[V(1)*230;V(2)*230;V(3)*230;V(4)*230];
table(BUS_NUMBER,VOLTAGE_Kv)

%Slack bus power display:
SLACK_BUS_POWER =["Injected power (MVA)";"Generated power (MVA)"];
S=[Slack_Bus_Injected_Power*100; Slack_Bus_Generated_Power*100];
table(SLACK_BUS_POWER,S)

%Line flows and lines losses display:
LINE_NUMBER =["Line 1-2";"Line 1-3";"Line 4-3";"Line 4-2";];
LINE_FLOW_MVA = [S12*100;S13*100;S43*100;S42*100];
DIRECTION_OF_FLOW = ["Bus 1 to Bus 2";"Bus 1 to Bus 3";"Bus 4 to Bus 3";"Bus 4 to Bus 2";];
LINE_LOSSES_MVA = [Line1_2Losses*100;Line1_3Losses*100;Line4_3Losses*100;Line4_2Losses*100];
table(LINE_NUMBER,LINE_FLOW_MVA,DIRECTION_OF_FLOW,LINE_LOSSES_MVA)




